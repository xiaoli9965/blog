(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{463:function(t,_,e){"use strict";e.r(_);var a=e(34),v=Object(a.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-为什么要用-mq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么要用-mq"}},[t._v("#")]),t._v(" 1. 为什么要用 MQ")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("异步通信")]),t._v(" - 提升系统的相应速度")]),t._v(" "),e("li",[e("code",[t._v("系统解耦")])]),t._v(" "),e("li",[e("code",[t._v("流量削峰")]),t._v(" - 利用先进先出特性")]),t._v(" "),e("li",[e("code",[t._v("分布式事务解决方案")]),t._v(" - 可靠消息投递")])]),t._v(" "),e("h2",{attrs:{id:"_2-使用-mq-会带来的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-mq-会带来的问题"}},[t._v("#")]),t._v(" 2. 使用 MQ 会带来的问题")]),t._v(" "),e("ul",[e("li",[t._v("提供了系统的复杂性(多加了一个 MQ 服务器)")]),t._v(" "),e("li",[t._v("数据一致性问题")])]),t._v(" "),e("h2",{attrs:{id:"_3-各大厂商的-mq-对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-各大厂商的-mq-对比"}},[t._v("#")]),t._v(" 3. 各大厂商的 MQ 对比")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Active MQ")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("RabbitMQ")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Rocket MQ")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("kafka")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("开发语言")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("java")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("erlang")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("java")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("scala")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("单据吞吐量")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("万级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("万级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("10w 级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("10W 级")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("时效性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("ms 级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("us 级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("ms 级")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("ms 级以内")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("高可用")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("高(主从架构)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("高(主从架构)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非常高(分布式架构)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("非常高(分布式架构)")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("功能特性")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("文档好,各种协议支持较好")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("并发能力很强,延时低,有管理界面")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("MQ 功能完备,性能极好,延时低,有管理界面")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("为大数据准备的,在大数据领域应用广")])])])]),t._v(" "),e("h2",{attrs:{id:"_4-重点掌握-💥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-重点掌握-💥"}},[t._v("#")]),t._v(" 4. 重点掌握 💥")]),t._v(" "),e("p",[e("code",[t._v("学习RabbitMQ的重中之重")])]),t._v(" "),e("h3",{attrs:{id:"_4-1-producer-生产者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-producer-生产者"}},[t._v("#")]),t._v(" 4.1. Producer 生产者")]),t._v(" "),e("ul",[e("li",[t._v("路由不可达")]),t._v(" "),e("li",[t._v("事务机制")]),t._v(" "),e("li",[t._v("发布确认机制")])]),t._v(" "),e("h3",{attrs:{id:"_4-2-consumer-消费者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-consumer-消费者"}},[t._v("#")]),t._v(" 4.2. Consumer 消费者")]),t._v(" "),e("ul",[e("li",[t._v("两种消息的消费模式(pull/push)")]),t._v(" "),e("li",[t._v("消费者注册/取消")]),t._v(" "),e("li",[t._v("独占消费者")]),t._v(" "),e("li",[t._v("消费确认优先级")]),t._v(" "),e("li",[t._v("消息确认")]),t._v(" "),e("li",[t._v("pull 拉模式")])]),t._v(" "),e("h2",{attrs:{id:"_5-rabbitmq-模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-rabbitmq-模型"}},[t._v("#")]),t._v(" 5. RabbitMQ 模型")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213212_S4xaNM_Screenshot.jpeg",alt:"AMQP模型"}})]),t._v(" "),e("h3",{attrs:{id:"_5-1-生产消费流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-生产消费流程"}},[t._v("#")]),t._v(" 5.1. 生产消费流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213233_tOqkkT_Screenshot.jpeg",alt:"生产消费流程"}})]),t._v(" "),e("h3",{attrs:{id:"_5-2-生产者工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-生产者工作流程"}},[t._v("#")]),t._v(" 5.2. 生产者工作流程")]),t._v(" "),e("ul",[e("li",[t._v("生产者程序启动连接到 broker, 建立一个连接,开启一个或多个 channel")]),t._v(" "),e("li",[t._v("通过 channel 创建一个交换机/队列 ,并设置相关属性")]),t._v(" "),e("li",[t._v("通过路由键将交换机和队列绑定起来")]),t._v(" "),e("li",[t._v("通过发送消息到 Broker(包含路由键,交换机信息)")]),t._v(" "),e("li",[t._v("相应的交换机接受到消息后存入相应的队列(如果找不到队列就会丢弃或者退回和进入死信队列)")]),t._v(" "),e("li",[t._v("关闭通道,关闭连接")])]),t._v(" "),e("h3",{attrs:{id:"_5-3-消费者者工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-消费者者工作流程"}},[t._v("#")]),t._v(" 5.3. 消费者者工作流程")]),t._v(" "),e("ul",[e("li",[t._v("消费者连接到 broker ,建立一个连接,开启一个或多个 channel")]),t._v(" "),e("li",[t._v("请求消费相关队列中的消息")]),t._v(" "),e("li",[t._v("broker 投递相关队列的消息给消费者")]),t._v(" "),e("li",[t._v("消费者消费完之后确认消费(ack)")]),t._v(" "),e("li",[t._v("删除已确认消费的消息")]),t._v(" "),e("li",[t._v("关闭通道,关闭连接")])]),t._v(" "),e("h3",{attrs:{id:"_5-4-broker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-broker"}},[t._v("#")]),t._v(" 5.4. Broker")]),t._v(" "),e("p",[t._v("服务节点,代表一个 MQ 主机")]),t._v(" "),e("h3",{attrs:{id:"_5-5-vhost-虚拟主机"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-vhost-虚拟主机"}},[t._v("#")]),t._v(" 5.5. VHost 虚拟主机")]),t._v(" "),e("p",[t._v("虚拟主机,相当于 Java 中的包(命名空间) ,用于做数据隔离的")]),t._v(" "),e("h3",{attrs:{id:"_5-6-connection-连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-connection-连接"}},[t._v("#")]),t._v(" 5.6. Connection 连接")]),t._v(" "),e("p",[t._v("AMQP 协议是基于"),e("code",[t._v("长连接")]),t._v(".")]),t._v(" "),e("ul",[e("li",[t._v("客户端启动时开启一个连接,对应大流量的应用可能需要多个连接")]),t._v(" "),e("li",[t._v("在客户端关闭的时候关闭连接")])]),t._v(" "),e("h3",{attrs:{id:"_5-7-channel-通道"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-channel-通道"}},[t._v("#")]),t._v(" 5.7. Channel 通道")]),t._v(" "),e("p",[t._v("通道,是建立在 Connection 之上的轻量级连接(一个 Connection 上可以建立 N 个 channel)")]),t._v(" "),e("p",[e("code",[t._v("大部分操作都是在Channel这个接口中完成的,如(申明队列,申明交换机,队列绑定,发布消息,消费消息)")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213257_TUlK7l_Screenshot.jpeg",alt:"Channel"}})]),t._v(" "),e("h3",{attrs:{id:"_5-8-exchange-交换器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-exchange-交换器"}},[t._v("#")]),t._v(" 5.8. Exchange 交换器")]),t._v(" "),e("p",[t._v("生产者将消息发送给交换器(用 X 标示),交换器再去路由到队列中")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTgy1gd36375hxzj318g0eu75z.jpg",alt:"交换器"}})]),t._v(" "),e("h3",{attrs:{id:"_5-9-exchange-交换器类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-exchange-交换器类型"}},[t._v("#")]),t._v(" 5.9. Exchange 交换器类型")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("fanout:")]),t._v(" (速度最快)路由表模式,将消息发送到所有绑定关系的队列中")]),t._v(" "),e("li",[e("strong",[t._v("direct:")]),t._v(" 直连,"),e("code",[t._v("一对一")]),t._v(" 将消息分发到 BingdingKey 和 RoutingKey 完全匹配的队列中")]),t._v(" "),e("li",[e("strong",[t._v("💥Topic:")]),t._v(" 模糊匹配 "),e("code",[t._v("一对多")]),t._v(" 通过匹配 RoutingKey 将消息分发给相应队列")]),t._v(" "),e("li",[e("strong",[t._v("headers:")]),t._v(" (不用,性能差,不实用)不依赖路由键,通过消息头进行匹配")])]),t._v(" "),e("h3",{attrs:{id:"_5-10-routingkey-路由键"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-10-routingkey-路由键"}},[t._v("#")]),t._v(" 5.10. RoutingKey 路由键")]),t._v(" "),e("p",[t._v("路由规则,将消息发送给交换器的时候通过这个路由 key 指定路由到那些队列中")]),t._v(" "),e("h3",{attrs:{id:"_5-11-queue-队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-11-queue-队列"}},[t._v("#")]),t._v(" 5.11. Queue 队列")]),t._v(" "),e("p",[t._v("是用于存储消息的对象")]),t._v(" "),e("h3",{attrs:{id:"_5-12-binding-绑定关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-12-binding-绑定关系"}},[t._v("#")]),t._v(" 5.12. Binding 绑定关系")]),t._v(" "),e("p",[t._v("通过这个将队列与交换器绑定起来,一般会指定一个"),e("code",[t._v("绑定键(bingdingKey)")])]),t._v(" "),e("h3",{attrs:{id:"_5-13-message-消息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-13-message-消息"}},[t._v("#")]),t._v(" 5.13. Message 消息")]),t._v(" "),e("p",[t._v("消息分为两个属性: 消息体和消息属性")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("消息体:")]),t._v(" 实际的数据")]),t._v(" "),e("li",[e("strong",[t._v("消息属性:")]),t._v(" 描述这个消息的 路由键, 交换器名称 和 TTL 等一些属性")])]),t._v(" "),e("h2",{attrs:{id:"_6-生产者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-生产者"}},[t._v("#")]),t._v(" 6. 生产者")]),t._v(" "),e("h3",{attrs:{id:"_6-1-rabbit-的可靠消息投递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-rabbit-的可靠消息投递"}},[t._v("#")]),t._v(" 6.1. Rabbit 的可靠消息投递")]),t._v(" "),e("p",[t._v("先写库,写库成功了再发送 MQ")]),t._v(" "),e("h3",{attrs:{id:"_6-2-服务端确认-事务模式-阻塞-不建议使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-服务端确认-事务模式-阻塞-不建议使用"}},[t._v("#")]),t._v(" 6.2. 服务端确认-事务模式 (阻塞,不建议使用)")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("channel.txSelect()")]),t._v(" 开启事务")]),t._v(" "),e("li",[e("code",[t._v("channel.txCommut()")]),t._v(" 提交事务")]),t._v(" "),e("li",[e("code",[t._v("channel.txRollback()")]),t._v(" 回滚事务")])]),t._v(" "),e("p",[t._v("事务消息这种模式是阻塞的,很影响性能 不建议使用")]),t._v(" "),e("h3",{attrs:{id:"_6-3-服务端确认-ack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-服务端确认-ack"}},[t._v("#")]),t._v(" 6.3. 服务端确认-(ACK)")]),t._v(" "),e("blockquote",[e("p",[t._v("这种模式分为 "),e("code",[t._v("手动ACK/自动ACK")]),t._v(" 和 "),e("code",[t._v("同步ACK/异步ACK")])])]),t._v(" "),e("h3",{attrs:{id:"_6-4-手动-ack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-手动-ack"}},[t._v("#")]),t._v(" 6.4. 手动 ACK")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("发完消息都在最后一行发送ACK确认(只要不报错就是成功)\n每次都发送ACK会比耗性能也会比较慢..\n")])])]),e("p",[e("code",[t._v("如果消费了消息不回应ACK会导致队列堵塞,永远不会投递下一条消息")])]),t._v(" "),e("h3",{attrs:{id:"_6-5-自动-ack-有弊端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-自动-ack-有弊端"}},[t._v("#")]),t._v(" 6.5. 自动 ACK (有弊端)")]),t._v(" "),e("p",[t._v("在 SpringTemplate 中只要接受到消息就会回复 ack..\n如果在执行消息后续操作报错了的话这个消息就丢失了(不安全)")]),t._v(" "),e("h3",{attrs:{id:"_6-6-异步-ack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-异步-ack"}},[t._v("#")]),t._v(" 6.6. 异步 ACK")]),t._v(" "),e("p",[t._v("每次发完消息后会异步返回, 通过 "),e("code",[t._v("ComfirmListener(spring叫 ComfirmCollBack)")]),t._v("接受到 ACK 确认情况")]),t._v(" "),e("h3",{attrs:{id:"_6-7-mandatory-requeue-重新入队-慎用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-mandatory-requeue-重新入队-慎用"}},[t._v("#")]),t._v(" 6.7. mandatory /reQueue 重新入队 (慎用)")]),t._v(" "),e("p",[e("code",[t._v("一般开启手动应答时会关闭重新入队")])]),t._v(" "),e("p",[t._v("在 "),e("code",[t._v("消息异常/消息拒绝/和NACK")]),t._v(" 的时候可以将消息重新入队(在配置中有是否开启 ReQueue 的选项)")]),t._v(" "),e("p",[t._v("如果只有一个消费者的时候开启重新入队,会导致死循环问题(消费者消费出错->重新入队->消费者再消费->消费报错->重新入队->消费者接收消息)")]),t._v(" "),e("p",[t._v("SpringBoot 的 Template 中设置手动应答("),e("code",[t._v("ackNoivLedgMod")]),t._v(")时有三个选项:")]),t._v(" "),e("ul",[e("li",[t._v("NONE 自动")]),t._v(" "),e("li",[t._v("MANUAL 手动")]),t._v(" "),e("li",[t._v("AUTO 不出异常时发 ack,出异常时发 Nack 并且不 Requeue")])]),t._v(" "),e("h3",{attrs:{id:"_6-8-rabbit-延时队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-8-rabbit-延时队列"}},[t._v("#")]),t._v(" 6.8. Rabbit 延时队列")]),t._v(" "),e("p",[e("strong",[t._v("延时队列实现方式:")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("老方法:")]),t._v(" 过期消息+ 死信队列")]),t._v(" "),e("li",[e("strong",[t._v("新方法:")]),t._v(" "),e("code",[t._v("rabbitmq_delayed_message_exchange")]),t._v(" 插件\n"),e("ul",[e("li",[t._v("这种方式只支持延时,不支持重复")]),t._v(" "),e("li",[t._v("创建一个 "),e("code",[t._v("x-delayed-message")]),t._v("类型的 Exchange")]),t._v(" "),e("li",[t._v("发消息时在消息头中设置("),e("code",[t._v("x-delay")]),t._v(","),e("code",[t._v("5000")]),t._v(") 指定毫秒")])])])]),t._v(" "),e("h3",{attrs:{id:"_6-9-rabbit-死信队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-9-rabbit-死信队列"}},[t._v("#")]),t._v(" 6.9. Rabbit 死信队列")]),t._v(" "),e("blockquote",[e("p",[t._v("死信队列其实也是一个队列,设置了"),e("code",[t._v("Dead-Letter-Exchange")]),t._v("它就是死信队列\n死信队列需要和死信交换机绑定 设置了"),e("code",[t._v("x-dead-letter-exchange")]),t._v("它就是死信交换机")])]),t._v(" "),e("p",[e("strong",[t._v("消息变为死信队列情况:")])]),t._v(" "),e("ul",[e("li",[t._v("消息被拒绝(requeue 重回队列为 false)")]),t._v(" "),e("li",[t._v("消息 TTL 过期")]),t._v(" "),e("li",[t._v("队列达到最大长度 "),e("code",[t._v("max_lenth")]),t._v("和 消息长度容量"),e("code",[t._v("Max_length_bates")])])]),t._v(" "),e("h3",{attrs:{id:"_6-10-rabbit-独占队列-实现顺序消费"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-10-rabbit-独占队列-实现顺序消费"}},[t._v("#")]),t._v(" 6.10. Rabbit 独占队列(实现顺序消费)")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("独占队列:")]),t._v(" 被创建它的连接独占,这个连接上的 channel 可以共享,连接关闭独占队列就没有了")]),t._v(" "),e("li",[e("strong",[t._v("独占消费者:")]),t._v(" 独占一个队列进行消费,适用场景:消息顺序消费")])]),t._v(" "),e("h2",{attrs:{id:"_7-消费者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-消费者"}},[t._v("#")]),t._v(" 7. 消费者")]),t._v(" "),e("h3",{attrs:{id:"_7-1-消费者优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-消费者优先级"}},[t._v("#")]),t._v(" 7.1. 消费者优先级")]),t._v(" "),e("blockquote",[e("p",[t._v("Broker 默认发消息是轮询的\n在不指定优先级的时候默认轮询")])]),t._v(" "),e("ul",[e("li",[t._v("x-priority : 指定优先级")]),t._v(" "),e("li",[t._v("prefetch: 预取值")])]),t._v(" "),e("p",[t._v("在通道注册消费者的时候 指定"),e("code",[t._v("x-priority")]),t._v("属性,值越大优先级越高 .\n"),e("code",[t._v("默认是:0")]),t._v(", 这个参数不可以指定负数,只比对大小 ;")]),t._v(" "),e("p",[t._v("先将优先级高的"),e("code",[t._v("prefetch")]),t._v("发满(在没收到 ack 的情况下),再发优先级低的")]),t._v(" "),e("h3",{attrs:{id:"_7-2-rabbit-两种消费模式-pull-push"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-rabbit-两种消费模式-pull-push"}},[t._v("#")]),t._v(" 7.2. Rabbit 两种消费模式(pull/push)")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("push 推模式")]),t._v(" : 被动的接收/被动的确认")]),t._v(" "),e("li",[e("strong",[t._v("pull 拉模式")]),t._v(" : 自我掌控消息的接收确认.\n"),e("ul",[e("li",[t._v("有可能取到的消息是空,需要做为空确认")]),t._v(" "),e("li",[t._v("处理完消息后需要继续手动确认")])])])]),t._v(" "),e("h2",{attrs:{id:"_8-消息持久化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-消息持久化"}},[t._v("#")]),t._v(" 8. 消息持久化")]),t._v(" "),e("p",[t._v("持久化分为: "),e("code",[t._v("消息持久化")]),t._v(","),e("code",[t._v("交换器持久化")]),t._v(","),e("code",[t._v("队列持久化")])]),t._v(" "),e("blockquote",[e("p",[t._v("不管是持久化消息还是非持久化消息都阔以写入磁盘\nRabbitMQ 中有一个内置的数据库(elang 编写)")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("持久化消息:")]),t._v(" 当接收到消息后先进行落库,然后发布确认(放入内存)")]),t._v(" "),e("li",[e("strong",[t._v("非持久化消息:")]),t._v(" 当消息接收后直接放入内存,当消息到达一量后会转换到磁盘中存储(节省内存),当服务重启后消息无法恢复")])]),t._v(" "),e("h2",{attrs:{id:"_9-集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-集群"}},[t._v("#")]),t._v(" 9. 集群")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("目的:")]),t._v(" 高可用,增加负载")]),t._v(" "),e("li",[e("strong",[t._v("模式:")]),t._v(" 普通集群,镜像集群")]),t._v(" "),e("li",[e("strong",[t._v("节点类型:")]),t._v(" Disk"),e("code",[t._v("磁盘节点")]),t._v(",RAM"),e("code",[t._v("内存节点")])])]),t._v(" "),e("h3",{attrs:{id:"_9-1-cluster-普通集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-cluster-普通集群"}},[t._v("#")]),t._v(" 9.1. Cluster 普通集群")]),t._v(" "),e("blockquote",[e("p",[t._v("1.所有节点都是同等的,没有主节点概念 2."),e("strong",[t._v("对于外界来讲,看到的就是一个 broker")]),t._v(" 3.集群中节点共享元数据 , "),e("strong",[t._v("不共享队列")]),t._v(" 要消费的队列如果不在当前节点上,通过元数据可以获取到队列所在的节点 4.元数据指那些:vhost 内的交换器,绑定关系,用户,权限,策略等等.. "),e("strong",[t._v("只有消息不属于元信息")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213316_oytEhx_Screenshot.jpeg",alt:"普通模式"}})]),t._v(" "),e("h3",{attrs:{id:"_9-2-cluster-普通集群-如何处理负载均衡-大流量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-cluster-普通集群-如何处理负载均衡-大流量"}},[t._v("#")]),t._v(" 9.2. Cluster 普通集群 如何处理负载均衡,大流量")]),t._v(" "),e("p",[e("strong",[t._v("客户端随机连接")]),t._v(" : 连接的时候是随机从地址列表中选择的.")]),t._v(" "),e("h3",{attrs:{id:"_9-3-cluster-普通集群-是分布式的吗-大量消息是不是分布在不同节点进行处理的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-cluster-普通集群-是分布式的吗-大量消息是不是分布在不同节点进行处理的"}},[t._v("#")]),t._v(" 9.3. Cluster 普通集群 是分布式的吗?大量消息是不是分布在不同节点进行处理的")]),t._v(" "),e("p",[t._v("是的,队列存储在不同的节点中")]),t._v(" "),e("h3",{attrs:{id:"_9-4-cluster-普通集群-提升了那些东西"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-cluster-普通集群-提升了那些东西"}},[t._v("#")]),t._v(" 9.4. Cluster 普通集群 提升了那些东西")]),t._v(" "),e("p",[e("strong",[t._v("优点:")])]),t._v(" "),e("ul",[e("li",[t._v("可用性")]),t._v(" "),e("li",[t._v("队列消息数据安全性")]),t._v(" "),e("li",[t._v("提升了并发")])]),t._v(" "),e("p",[e("strong",[t._v("缺点:")])]),t._v(" "),e("ul",[e("li",[t._v("会存在单点故障问题,节点挂了队列就不能用了")])]),t._v(" "),e("h3",{attrs:{id:"_9-5-cluster-镜像集群-保证-cp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-cluster-镜像集群-保证-cp"}},[t._v("#")]),t._v(" 9.5. Cluster 镜像集群 (保证 CP)")]),t._v(" "),e("blockquote",[e("p",[t._v("支持事务,发布确认,可靠性\n"),e("strong",[t._v("发布确认:")]),t._v(" 当消息进来,主节点会将消息同步给从节点,从节点同步完了才会给发布者确认发布")])]),t._v(" "),e("p",[e("strong",[t._v("生产者:")]),t._v(" "),e("code",[t._v("生产者只能连接主节点")]),t._v(" "),e("strong",[t._v("消费者:")]),t._v(" "),e("code",[t._v("消费者连接的时候是随机选择一个节点连接的")])]),t._v(" "),e("p",[e("strong",[t._v("HA 模式指定:")])]),t._v(" "),e("ul",[e("li",[t._v("all: (默认值) 队列镜像到集群中所有节点")]),t._v(" "),e("li",[t._v("exactly: 队列镜像到指定数量的节点 "),e("code",[t._v("ha-papam可以指定镜像个数")])]),t._v(" "),e("li",[t._v("nodes: 队列镜像到指定节点")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213329_CtXZbj_Screenshot.jpeg",alt:"镜像集群"}}),t._v(" "),e("img",{attrs:{src:"http://md.yike.link/20200325213345_mfshAr_Screenshot.jpeg",alt:"镜像集群-高可用"}})]),t._v(" "),e("h3",{attrs:{id:"_9-6-cluster-镜像设置多少个合适"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-6-cluster-镜像设置多少个合适"}},[t._v("#")]),t._v(" 9.6. Cluster 镜像设置多少个合适")]),t._v(" "),e("p",[t._v("大多数规则:"),e("code",[t._v("集群接点数/2 + 1")])]),t._v(" "),e("h2",{attrs:{id:"_10-其他集群模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-其他集群模式"}},[t._v("#")]),t._v(" 10. 其他集群模式")]),t._v(" "),e("h3",{attrs:{id:"_10-1-federation-联盟模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-federation-联盟模式"}},[t._v("#")]),t._v(" 10.1. Federation 联盟模式")]),t._v(" "),e("blockquote",[e("p",[t._v("多个 broker 联合起来一起服务 ,"),e("code",[t._v("基于AMQP进行数据交互")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213402_Ju6zUi_Screenshot.jpeg",alt:"网络结构1"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213415_c7JRqK_Screenshot.jpeg",alt:"网络结构2"}}),t._v(" "),e("img",{attrs:{src:"http://md.yike.link/20200325213428_9AT28B_Screenshot.jpeg",alt:"联合结构"}})]),t._v(" "),e("h3",{attrs:{id:"_10-2-slovel-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-slovel-插件"}},[t._v("#")]),t._v(" 10.2. Slovel 插件")]),t._v(" "),e("blockquote",[e("p",[t._v("在两个彼此独立的 broker 中建立互联互通 "),e("code",[t._v("通过AMQP协议进行交互")]),t._v("\n将原目标队列中的消息直接铲到其队列中")])]),t._v(" "),e("p",[e("strong",[t._v("两种配置方式:")])]),t._v(" "),e("ul",[e("li",[t._v("静态: 在配置文件"),e("code",[t._v("./rabbitmq/advanced.con")]),t._v("中,需重启")]),t._v(" "),e("li",[t._v("动态: 通过命令行参数配置")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213456_DGTi7v_Screenshot.jpeg",alt:"Slovel1"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213510_YlOlIQ_Screenshot.jpeg",alt:"Slovel2"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213526_Pq2Xa4_Screenshot.jpeg",alt:"Slovel3"}})]),t._v(" "),e("h3",{attrs:{id:"_10-3-federation-slovel-和-cluster-模式的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-federation-slovel-和-cluster-模式的区别"}},[t._v("#")]),t._v(" 10.3. Federation/Slovel 和 Cluster 模式的区别")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Federation/Slovel")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("cluster")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("适用于外网 ,网络一般,需要在互联网通信")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("使用内网,高效,解决高并发,海量数据")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("AP (可用性/容错性)")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("CP (一致性,可用性)")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://md.yike.link/20200325213541_N15mSj_Screenshot.jpeg",alt:"区别"}})])])}),[],!1,null,null,null);_.default=v.exports}}]);