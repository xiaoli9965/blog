(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{455:function(a,t,s){"use strict";s.r(t);var r=s(34),_=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-基础"}},[a._v("#")]),a._v(" Java 基础")]),a._v(" "),s("h2",{attrs:{id:"_1-java-中的几种基本数据类型是什么-各自占用多少字节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-java-中的几种基本数据类型是什么-各自占用多少字节"}},[a._v("#")]),a._v(" 1. JAVA 中的几种基本数据类型是什么, 各自占用多少字节.")]),a._v(" "),s("ul",[s("li",[a._v("int 4")]),a._v(" "),s("li",[a._v("long 8")]),a._v(" "),s("li",[a._v("float 4")]),a._v(" "),s("li",[a._v("duoble 8")]),a._v(" "),s("li",[a._v("boolean 1bit")]),a._v(" "),s("li",[a._v("char 2")]),a._v(" "),s("li",[a._v("byte 1")])]),a._v(" "),s("h2",{attrs:{id:"_2-string-类能被继承吗-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-string-类能被继承吗-为什么"}},[a._v("#")]),a._v(" 2. String 类能被继承吗, 为什么.")]),a._v(" "),s("ul",[s("li",[a._v("不能,应为String 类被final修饰的,被fianl修饰的内不能被集成,binal修饰的变量不能修改值,final修饰的方法不能被重写")])]),a._v(" "),s("h2",{attrs:{id:"_3-string-stringbuffer-stringbuilder-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-string-stringbuffer-stringbuilder-的区别"}},[a._v("#")]),a._v(" 3. String, Stringbuffer, StringBuilder 的区别.")]),a._v(" "),s("ul",[s("li",[a._v("String长度不可变,适用于少量的字符串操作的情况")]),a._v(" "),s("li",[a._v("以下两种适用于大量字符串操作的情况,比如for循环拼接字符串")]),a._v(" "),s("li",[a._v("Stringbuffer 长度可变, 线程安全,部分方法通过synchronized来保证线程安全")]),a._v(" "),s("li",[a._v("StringBuilder长度可变, 线程不安全")])]),a._v(" "),s("h2",{attrs:{id:"_4-arraylist-和-linkedlist-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-arraylist-和-linkedlist-有什么区别"}},[a._v("#")]),a._v(" 4. ArrayList 和 LinkedList 有什么区别.")]),a._v(" "),s("ul",[s("li",[a._v("ArrayList底层是数组实现., 查找速度相对较快 o(1).\n"),s("ul",[s("li",[a._v("大数据量情况下Arraylist插入删除速度不如arraylist.")])])]),a._v(" "),s("li",[a._v("LinkedList底层是链表实现, 链表需一个一个遍历所以相对速度慢一点 o(n).\n"),s("ul",[s("li",[a._v("但是插入速度比arraylist块,只需要新建一个node到相应位置连接起来就行了. 在做反转的时候性能优于ArrayList")])])])]),a._v(" "),s("h2",{attrs:{id:"_5-讲讲类的实例化顺序-比如父类静态数据-构造函数-字段-子类静态数据-构造函数-字段-当-new-的时候-他们的执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-讲讲类的实例化顺序-比如父类静态数据-构造函数-字段-子类静态数据-构造函数-字段-当-new-的时候-他们的执行顺序"}},[a._v("#")]),a._v(" 5. 讲讲类的实例化顺序, 比如父类静态数据, 构造函数, 字段, 子类静态数据, 构造函数, 字段, 当 new 的时候, 他们的执行顺序.")]),a._v(" "),s("ul",[s("li",[a._v("父类--静态变量")]),a._v(" "),s("li",[a._v("父类--静态初始化块")]),a._v(" "),s("li",[a._v("子类--静态变量")]),a._v(" "),s("li",[a._v("子类--静态初始化块")]),a._v(" "),s("li",[a._v("父类--变量")]),a._v(" "),s("li",[a._v("父类--初始化块")]),a._v(" "),s("li",[a._v("父类--构造器")]),a._v(" "),s("li",[a._v("子类--变量")]),a._v(" "),s("li",[a._v("子类--初始化块")]),a._v(" "),s("li",[a._v("子类--构造器")])]),a._v(" "),s("p",[a._v("顺序: 静态变量> 静态代码块> 变量> 代码块> 构造器")]),a._v(" "),s("h2",{attrs:{id:"_6-java8-的-concurrenthashmap-为什么放弃了分段锁-有什么问题吗-如果你来设计-你如何设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-java8-的-concurrenthashmap-为什么放弃了分段锁-有什么问题吗-如果你来设计-你如何设计"}},[a._v("#")]),a._v(" 6. JAVA8 的 ConcurrentHashMap 为什么放弃了分段锁, 有什么问题吗, 如果你来设计, 你如何设计.")]),a._v(" "),s("ul",[s("li",[a._v("使用了cas机制,提升并发")]),a._v(" "),s("li",[a._v("链表+红黑树")])]),a._v(" "),s("h2",{attrs:{id:"_7-有没有有顺序的-map-实现类-如果有-他们是怎么保证有序的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-有没有有顺序的-map-实现类-如果有-他们是怎么保证有序的"}},[a._v("#")]),a._v(" 7. 有没有有顺序的 Map 实现类, 如果有, 他们是怎么保证有序的.")]),a._v(" "),s("ul",[s("li",[a._v("treeMap: key升序, 顾名思义二叉树结构")]),a._v(" "),s("li",[a._v("LinkedHashMap: 插入顺序, 链表+hash表, 链表记录顺序")])]),a._v(" "),s("h2",{attrs:{id:"_8-抽象类和接口的区别-类可以继承多个类么-接口可以继承多个接口么-类可以实现多个接口么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-抽象类和接口的区别-类可以继承多个类么-接口可以继承多个接口么-类可以实现多个接口么"}},[a._v("#")]),a._v(" 8. 抽象类和接口的区别, 类可以继承多个类么, 接口可以继承多个接口么,类可以实现多个接口么.")]),a._v(" "),s("p",[a._v("单继承(抽象类),\n多实现(接口)")]),a._v(" "),s("h2",{attrs:{id:"_9-继承和聚合的区别在哪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-继承和聚合的区别在哪"}},[a._v("#")]),a._v(" 9. 继承和聚合的区别在哪.")]),a._v(" "),s("ul",[s("li",[a._v("继承就是获得父类的方法,直接调用")]),a._v(" "),s("li",[a._v("聚合就是将一个对象作赋值到变量中,然后获得其方法能力")])]),a._v(" "),s("h2",{attrs:{id:"_10-io-模型有哪些-讲讲你理解的-nio-他和-bio-aio-的区别是啥-谈谈-reactor-模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-io-模型有哪些-讲讲你理解的-nio-他和-bio-aio-的区别是啥-谈谈-reactor-模型"}},[a._v("#")]),a._v(" 10. IO 模型有哪些, 讲讲你理解的 nio , 他和 bio, aio 的区别是啥, 谈谈 reactor 模型.")]),a._v(" "),s("ul",[s("li",[a._v("nio: 同步非阻塞")]),a._v(" "),s("li",[a._v("bio: 同步阻塞")]),a._v(" "),s("li",[a._v("aio: 异步非阻塞")])]),a._v(" "),s("h2",{attrs:{id:"_11-反射的原理-反射创建类实例的三种方式是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-反射的原理-反射创建类实例的三种方式是什么"}},[a._v("#")]),a._v(" 11. 反射的原理, 反射创建类实例的三种方式是什么.")]),a._v(" "),s("ul",[s("li",[a._v("对象还为被jvm加载时:"),s("code",[a._v("class.forName")])]),a._v(" "),s("li",[a._v("已加载时可以使使用 "),s("code",[a._v("类名.class")])]),a._v(" "),s("li",[a._v("已经创建的实例:"),s("code",[a._v("对象.getclass();")])])]),a._v(" "),s("h2",{attrs:{id:"_12-反射中-class-forname-和-classloader-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-反射中-class-forname-和-classloader-区别"}},[a._v("#")]),a._v(" 12. 反射中, Class.forName 和 ClassLoader 区别 .")]),a._v(" "),s("p",[a._v("这两个都会触发类加载")]),a._v(" "),s("ul",[s("li",[a._v("ClassLoader 只负责将字节码文件加载到jvm虚拟机中, 后续由用户自己去new对象\n"),s("ul",[s("li",[a._v("实际调用: "),s("code",[a._v("ClassLoader.loadClass(className,false);")]),a._v(" 第2个boolean参数, 表示目标对象是否进行链接")])])]),a._v(" "),s("li",[a._v("Class.forName 会将类加载到虚拟机中,还会对类进行解释, 执行类中的static块.\n"),s("ul",[s("li",[a._v("实际调用: "),s("code",[a._v("Class.forName(className,true,classloader);")]),a._v(" 第2个boolean参数表示类是否需要初始化")])])])]),a._v(" "),s("h2",{attrs:{id:"_13-💥-描述动态代理的几种实现方式-分别说出相应的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-💥-描述动态代理的几种实现方式-分别说出相应的优缺点"}},[a._v("#")]),a._v(" 13. 💥 描述动态代理的几种实现方式, 分别说出相应的优缺点.")]),a._v(" "),s("p",[a._v("通过一定的技术，直接在运行期间，生成相应的Java字节码文件；")]),a._v(" "),s("p",[a._v("优缺点:")]),a._v(" "),s("ul",[s("li",[a._v("JDK自带:\n"),s("ul",[s("li",[a._v("jdk自带,无需依赖. 必须要实现接口"),s("code",[a._v("InvocationHandler")])])])]),a._v(" "),s("li",[a._v("CGlib:\n"),s("ul",[s("li",[a._v("对代理目标无限制,无需实现接口")])])])]),a._v(" "),s("h2",{attrs:{id:"_14-💥-动态代理与-cglib-实现的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-💥-动态代理与-cglib-实现的区别"}},[a._v("#")]),a._v(" 14. 💥 动态代理与 cglib 实现的区别.")]),a._v(" "),s("ul",[s("li",[a._v("JDK自带:\n"),s("ul",[s("li",[a._v("jdk自带,无需依赖. 必须要实现接口"),s("code",[a._v("InvocationHandler")])])])]),a._v(" "),s("li",[a._v("CGlib:\n"),s("ul",[s("li",[a._v("对代理目标无限制,无需实现接口")])])])]),a._v(" "),s("h2",{attrs:{id:"_15-💥-为什么-cglib-方式可以对接口实现代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-💥-为什么-cglib-方式可以对接口实现代理"}},[a._v("#")]),a._v(" 15. 💥 为什么 CGlib 方式可以对接口实现代理.")]),a._v(" "),s("p",[a._v("其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。JDK动态代理与CGLib动态代理均是实现Spring AOP的基础")]),a._v(" "),s("h2",{attrs:{id:"_16-final-的用途"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-final-的用途"}},[a._v("#")]),a._v(" 16. final 的用途.")]),a._v(" "),s("p",[a._v("标记类: 无法被继承\n标记变量: 初始化后无法修改\n标记方法: 无法被重写")]),a._v(" "),s("h2",{attrs:{id:"_17-写出三种单例模式实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-写出三种单例模式实现"}},[a._v("#")]),a._v(" 17. 写出三种单例模式实现 .")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 恶汉")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton01")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton01")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("volatile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton01")]),a._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton01")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton01")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 懒汉")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton02")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton02")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("volatile")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton02")]),a._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton02")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton02")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton02")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 静态内部内")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton03")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton03")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton03")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InnerSl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InnerSl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InnerSl")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton03")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton03")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"_18-如何在父类中为子类自动完成所有的-hashcode-和-equals-实现-这么做有何优劣"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-如何在父类中为子类自动完成所有的-hashcode-和-equals-实现-这么做有何优劣"}},[a._v("#")]),a._v(" 18. 如何在父类中为子类自动完成所有的 hashcode 和 equals 实现?这么做有何优劣.")]),a._v(" "),s("p",[a._v("hashcode 和 equals 本身就是父类实现的,   顶级父类Objetc类\n优点: 不需要我们再去写了")]),a._v(" "),s("h2",{attrs:{id:"_19-请结合-oo-设计理念-谈谈访问修饰符-public-private-protected-default-在应用设计中的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-请结合-oo-设计理念-谈谈访问修饰符-public-private-protected-default-在应用设计中的作用"}},[a._v("#")]),a._v(" 19. 请结合 OO 设计理念, 谈谈访问修饰符 public, private, protected, default 在应用设计中的作用.")]),a._v(" "),s("h2",{attrs:{id:"_20-深拷贝和浅拷贝区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-深拷贝和浅拷贝区别"}},[a._v("#")]),a._v(" 20. 深拷贝和浅拷贝区别.")]),a._v(" "),s("ul",[s("li",[a._v("浅拷贝只拷贝了外层的对象, 如果是普通数据类型则是值拷贝,如果是对象则只是拷贝了引用(指针), 如果修改拷贝对象时源对象也会跟着变;")]),a._v(" "),s("li",[a._v("深拷贝就是根据旧的对象全部创建一个一模一样的新的, 操作新的对象不会对原有对象产生修改;")])]),a._v(" "),s("h2",{attrs:{id:"_21-数组和链表数据结构描述-各自的时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-数组和链表数据结构描述-各自的时间复杂度"}},[a._v("#")]),a._v(" 21. 数组和链表数据结构描述, 各自的时间复杂度.")]),a._v(" "),s("p",[a._v("时间复杂度:")]),a._v(" "),s("ul",[s("li",[a._v("数组查询 o(1), 新增和删除 o(n)")]),a._v(" "),s("li",[a._v("时间复杂度: 链表查询 o(n), 新增和删除 o(1)")])]),a._v(" "),s("h2",{attrs:{id:"_22-error-和-exception-的区别-checkedexception-runtimeexception-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-error-和-exception-的区别-checkedexception-runtimeexception-的区别"}},[a._v("#")]),a._v(" 22. error 和 exception 的区别, CheckedException, RuntimeException 的区别.")]),a._v(" "),s("ul",[s("li",[a._v("运行时异常")]),a._v(" "),s("li",[a._v("异常")])]),a._v(" "),s("h2",{attrs:{id:"_23-请列出-5-个运行时异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-请列出-5-个运行时异常"}},[a._v("#")]),a._v(" 23. 请列出 5 个运行时异常.")]),a._v(" "),s("ul",[s("li",[a._v("runtime")]),a._v(" "),s("li",[a._v("stack Overflow")]),a._v(" "),s("li",[a._v("OutMemory")]),a._v(" "),s("li",[a._v("NullPointer")]),a._v(" "),s("li",[a._v("IndexOutOfBounds")]),a._v(" "),s("li",[a._v("ClassCast")])]),a._v(" "),s("h2",{attrs:{id:"_24-在自己的代码中-如果创建一个-java-lang-string-类-这个类是否可以被类加载器加载-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-在自己的代码中-如果创建一个-java-lang-string-类-这个类是否可以被类加载器加载-为什么"}},[a._v("#")]),a._v(" 24. 在自己的代码中, 如果创建一个 java.lang.String 类, 这个类是否可以被类加载器加载?为什么.")]),a._v(" "),s("p",[a._v("不能,甚至在IDE中都不能被创建, 根据双亲委派机制所有类只能加载一次,并且先加载jdk的依赖.")]),a._v(" "),s("h2",{attrs:{id:"_25-说一说你对-java-lang-object-对象中-hashcode-和-equals-方法的理解-在什么场景下需要重新实现这两个方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-说一说你对-java-lang-object-对象中-hashcode-和-equals-方法的理解-在什么场景下需要重新实现这两个方法"}},[a._v("#")]),a._v(" 25. 说一说你对 java.lang.Object 对象中 hashCode 和 equals 方法的理解. 在什么场景下需要重新实现这两个方法.")]),a._v(" "),s("ul",[s("li",[a._v("hashCode: 为对象生成一个唯一码")]),a._v(" "),s("li",[a._v("equals: 对比两个对象是否相等, 引用相等并且值相等")])]),a._v(" "),s("p",[a._v("equals相等, 那么hashcode一定相等\nhashcode相等,equals不一定相等")]),a._v(" "),s("p",[a._v("hashmap就自己实现了hash计算方法,为了更高效和均衡的分布")]),a._v(" "),s("h2",{attrs:{id:"_26-在-jdk1-5-中-引入了泛型-泛型的存在是用来解决什么问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-在-jdk1-5-中-引入了泛型-泛型的存在是用来解决什么问题"}},[a._v("#")]),a._v(" 26. 在 jdk1.5 中, 引入了泛型, 泛型的存在是用来解决什么问题.")]),a._v(" "),s("p",[a._v("主要是为了方便编码, 在jvm运行时并不关心泛型")]),a._v(" "),s("h2",{attrs:{id:"_27-这样的-a-hashcode-有什么用-与-a-equals-b-有什么关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-这样的-a-hashcode-有什么用-与-a-equals-b-有什么关系"}},[a._v("#")]),a._v(" 27. 这样的 a.hashcode() 有什么用, 与 a.equals(b)有什么关系.")]),a._v(" "),s("p",[a._v("equals相等两个对象，则hashcode一定要相等")]),a._v(" "),s("h2",{attrs:{id:"_28-有没有可能-2-个不相等的对象有相同的-hashcode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-有没有可能-2-个不相等的对象有相同的-hashcode"}},[a._v("#")]),a._v(" 28. 有没有可能 2 个不相等的对象有相同的 hashcode.")]),a._v(" "),s("p",[a._v("有可能,在自己重写了hashcode的情况下")]),a._v(" "),s("h2",{attrs:{id:"_29-java-中的-hashset-内部是如何工作的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-java-中的-hashset-内部是如何工作的"}},[a._v("#")]),a._v(" 29. Java 中的 HashSet 内部是如何工作的.")]),a._v(" "),s("p",[a._v("HashSet底层实际就是HashMAP, 只不过将Map的val对象使用一个常量填充")]),a._v(" "),s("h2",{attrs:{id:"_30-什么是序列化-怎么序列化-为什么序列化-反序列化会遇到什么问题-如何解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-什么是序列化-怎么序列化-为什么序列化-反序列化会遇到什么问题-如何解决"}},[a._v("#")]),a._v(" 30. 什么是序列化, 怎么序列化, 为什么序列化, 反序列化会遇到什么问题, 如何解决.")]),a._v(" "),s("p",[a._v("以一定格式对对象进行编码,使其可以保存在磁盘或者用于网络传输中,反序列化就可以恢复这个对象\n序列化的版本问题,")]),a._v(" "),s("ul",[s("li",[a._v("json序列化(跨语言)")]),a._v(" "),s("li",[a._v("hassian序列化(跨语言)")]),a._v(" "),s("li",[a._v("jdk自带序列化")])]),a._v(" "),s("h2",{attrs:{id:"_31-java8-的新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-java8-的新特性"}},[a._v("#")]),a._v(" 31. java8 的新特性.")]),a._v(" "),s("ul",[s("li",[a._v("lambda表达式 🔥")]),a._v(" "),s("li",[a._v("LocalTime API 🔥")]),a._v(" "),s("li",[a._v("Stream API🔥")])]),a._v(" "),s("h2",{attrs:{id:"_32-进程和线程的区别-使用线程真的能节省时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-进程和线程的区别-使用线程真的能节省时间"}},[a._v("#")]),a._v(" 32. 进程和线程的区别, 使用线程真的能节省时间?")]),a._v(" "),s("ul",[s("li",[a._v("进程是操作系统分配资源的最小单位")]),a._v(" "),s("li",[a._v("线程是最小执行单元")])]),a._v(" "),s("p",[a._v("节省时间:\n看CPU是不是多核的,如果是多核的那么计算操作可以节省时间,\n碰到IO阻塞那就得等着")]),a._v(" "),s("h1",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),s("h2",{attrs:{id:"_1-什么情况下会发生栈内存溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么情况下会发生栈内存溢出"}},[a._v("#")]),a._v(" 1. 什么情况下会发生栈内存溢出.")]),a._v(" "),s("ol",[s("li",[a._v("递归调用没有出口条件时,")])]),a._v(" "),s("h2",{attrs:{id:"_2-jvm-的内存结构-eden-和-survivor-比例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-jvm-的内存结构-eden-和-survivor-比例"}},[a._v("#")]),a._v(" 2. JVM 的内存结构, Eden 和 Survivor 比例.")]),a._v(" "),s("ul",[s("li",[a._v("8:2")])]),a._v(" "),s("h2",{attrs:{id:"_3-jvm-内存为什么要分成新生代-老年代-持久代-新生代中为什么要分为-eden-和-survivor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-jvm-内存为什么要分成新生代-老年代-持久代-新生代中为什么要分为-eden-和-survivor"}},[a._v("#")]),a._v(" 3. JVM 内存为什么要分成新生代, 老年代, 持久代. 新生代中为什么要分为 Eden 和 Survivor.")]),a._v(" "),s("p",[a._v("分代回收思想,将内存分成不同的区域然后分开进行回收,\n大部分情况下一个对象创建出来只使用一次就会GC回收, 如果垃圾回收没有被清理掉的对象就会被移动到S区,所以E区和S区的比例是8:1:1")]),a._v(" "),s("h2",{attrs:{id:"_4-jvm-中一次完整的-gc-流程是怎样的-对象如何晋升到老年代-说说你知道的几种主要的-jvm-参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-jvm-中一次完整的-gc-流程是怎样的-对象如何晋升到老年代-说说你知道的几种主要的-jvm-参数"}},[a._v("#")]),a._v(" 4. JVM 中一次完整的 GC 流程是怎样的, 对象如何晋升到老年代, 说说你知道的几种主要的 JVM 参数.")]),a._v(" "),s("p",[a._v("对象如何晋升到老年代:\n对象头中MarkWord有两4个字节标示当前对象的年龄,每经历一次垃圾回收年龄就会+1. 当到达15岁时被移动到老年代")]),a._v(" "),s("p",[a._v("-xss 设置栈的内存大小\n-xmx 设置最大堆内存\n-xms 设置最新堆内存\n-xmn 设置新生代大小\n-XX:printGC 打印GC日志\n-XX:printGCDetails 打印详细GC日志\n-XX:MetaSpaceSize 设置元空间最小大小")]),a._v(" "),s("h2",{attrs:{id:"_5-你知道哪几种垃圾收集器-各自的优缺点-重点讲下-cms-和-g1-包括原理-流程-优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-你知道哪几种垃圾收集器-各自的优缺点-重点讲下-cms-和-g1-包括原理-流程-优缺点"}},[a._v("#")]),a._v(" 5. 你知道哪几种垃圾收集器, 各自的优缺点, 重点讲下 cms 和 G1, 包括原理, 流程, 优缺点.")]),a._v(" "),s("ul",[s("li",[a._v("串行回收器:Serial, Serial Old")]),a._v(" "),s("li",[a._v("并行回收取: Parallel,Parallel Old")]),a._v(" "),s("li",[a._v("并行回收器: ParNew, Cms")]),a._v(" "),s("li",[a._v("G1")])]),a._v(" "),s("h2",{attrs:{id:"_6-垃圾回收算法的实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-垃圾回收算法的实现原理"}},[a._v("#")]),a._v(" 6. 垃圾回收算法的实现原理.")]),a._v(" "),s("h2",{attrs:{id:"_7-当出现了内存溢出-你怎么排错"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-当出现了内存溢出-你怎么排错"}},[a._v("#")]),a._v(" 7. 当出现了内存溢出, 你怎么排错.")]),a._v(" "),s("h2",{attrs:{id:"_8-jvm-内存模型的相关知识了解多少-比如重排序-内存屏障-happen-before-主内存-工作内存等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-jvm-内存模型的相关知识了解多少-比如重排序-内存屏障-happen-before-主内存-工作内存等"}},[a._v("#")]),a._v(" 8. JVM 内存模型的相关知识了解多少, 比如重排序, 内存屏障, happen-before, 主内存, 工作内存等.")]),a._v(" "),s("h2",{attrs:{id:"_9-简单说说你了解的类加载器-可以打破双亲委派么-怎么打破"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-简单说说你了解的类加载器-可以打破双亲委派么-怎么打破"}},[a._v("#")]),a._v(" 9. 简单说说你了解的类加载器, 可以打破双亲委派么, 怎么打破.")]),a._v(" "),s("h2",{attrs:{id:"_10-讲讲-java-的反射机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-讲讲-java-的反射机制"}},[a._v("#")]),a._v(" 10. 讲讲 JAVA 的反射机制.")]),a._v(" "),s("h2",{attrs:{id:"_11-你们线上应用的-jvm-参数有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-你们线上应用的-jvm-参数有哪些"}},[a._v("#")]),a._v(" 11. 你们线上应用的 JVM 参数有哪些.")]),a._v(" "),s("h2",{attrs:{id:"_12-g1-和-cms-区别-吞吐量优先和响应优先的垃圾收集器选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-g1-和-cms-区别-吞吐量优先和响应优先的垃圾收集器选择"}},[a._v("#")]),a._v(" 12. g1 和 cms 区别,吞吐量优先和响应优先的垃圾收集器选择.")]),a._v(" "),s("h2",{attrs:{id:"_13-怎么打出线程栈信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-怎么打出线程栈信息"}},[a._v("#")]),a._v(" 13. 怎么打出线程栈信息")]),a._v(" "),s("h2",{attrs:{id:"_14-后台进程有什么特点-如果要你设计一个进程是后台进程-你会考虑什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-后台进程有什么特点-如果要你设计一个进程是后台进程-你会考虑什么"}},[a._v("#")]),a._v(" 14. 后台进程有什么特点, 如果要你设计一个进程是后台进程, 你会考虑什么")]),a._v(" "),s("h2",{attrs:{id:"_15-僵尸进程是什么-如果产生一个僵尸进程-如何查找僵尸进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-僵尸进程是什么-如果产生一个僵尸进程-如何查找僵尸进程"}},[a._v("#")]),a._v(" 15. 僵尸进程是什么, 如果产生一个僵尸进程, 如何查找僵尸进程")]),a._v(" "),s("h2",{attrs:{id:"_16-一个进程有-20-个线程-在某个线程中调用-fork-新的进程会有-20-个线程吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-一个进程有-20-个线程-在某个线程中调用-fork-新的进程会有-20-个线程吗"}},[a._v("#")]),a._v(" 16. 一个进程有 20 个线程, 在某个线程中调用 fork, 新的进程会有 20 个线程吗?")]),a._v(" "),s("h2",{attrs:{id:"_17-java-虚拟机内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-java-虚拟机内存模型"}},[a._v("#")]),a._v(" 17. java 虚拟机内存模型")]),a._v(" "),s("h2",{attrs:{id:"_18-内存溢出一般发生在哪个区-永久代会不会导致内存溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-内存溢出一般发生在哪个区-永久代会不会导致内存溢出"}},[a._v("#")]),a._v(" 18. 内存溢出一般发生在哪个区?永久代会不会导致内存溢出?")]),a._v(" "),s("h2",{attrs:{id:"_19-动态加载类的框架了解哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-动态加载类的框架了解哪些"}},[a._v("#")]),a._v(" 19. 动态加载类的框架了解哪些?")]),a._v(" "),s("h2",{attrs:{id:"_20-动态代理一般有哪几种实现方式-动态代理的应用场景有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-动态代理一般有哪几种实现方式-动态代理的应用场景有哪些"}},[a._v("#")]),a._v(" 20. 动态代理一般有哪几种实现方式?动态代理的应用场景有哪些?")]),a._v(" "),s("h2",{attrs:{id:"_21-栈会不会溢出-栈溢出一般抛什么异常-jvm-在哪里设置栈的大小-设置的参数是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-栈会不会溢出-栈溢出一般抛什么异常-jvm-在哪里设置栈的大小-设置的参数是什么"}},[a._v("#")]),a._v(" 21. 栈会不会溢出?栈溢出一般抛什么异常?jvm 在哪里设置栈的大小?设置的参数是什么?")]),a._v(" "),s("h2",{attrs:{id:"_22-用过哪些命令查看-jvm-的状态-堆栈信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-用过哪些命令查看-jvm-的状态-堆栈信息"}},[a._v("#")]),a._v(" 22. 用过哪些命令查看 jvm 的状态, 堆栈信息?")]),a._v(" "),s("h2",{attrs:{id:"_23-jvm-的垃圾回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-jvm-的垃圾回收机制"}},[a._v("#")]),a._v(" 23. jvm 的垃圾回收机制?")]),a._v(" "),s("h2",{attrs:{id:"_24-java-类加载机制-如何实现自定义类加载器-findclass-与-loadclass-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-java-类加载机制-如何实现自定义类加载器-findclass-与-loadclass-的区别"}},[a._v("#")]),a._v(" 24. java 类加载机制?如何实现自定义类加载器?findClass 与 loadClass 的区别?")]),a._v(" "),s("h2",{attrs:{id:"_25-string-stringbuffer-stringbuilder-的区别-对应的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-string-stringbuffer-stringbuilder-的区别-对应的使用场景"}},[a._v("#")]),a._v(" 25. String, StringBuffer, StringBuilder 的区别?对应的使用场景?")]),a._v(" "),s("h2",{attrs:{id:"_26-如何实现不可变的类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-如何实现不可变的类"}},[a._v("#")]),a._v(" 26. 如何实现不可变的类?")]),a._v(" "),s("h2",{attrs:{id:"_27-浅复制和深复制-怎样实现深复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-浅复制和深复制-怎样实现深复制"}},[a._v("#")]),a._v(" 27. 浅复制和深复制?怎样实现深复制?")]),a._v(" "),s("h2",{attrs:{id:"_28-hashmap-hashtable-concurrenthashmap-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-hashmap-hashtable-concurrenthashmap-的区别"}},[a._v("#")]),a._v(" 28. HashMap, HashTable, ConcurrentHashMap 的区别?")]),a._v(" "),s("h2",{attrs:{id:"_29-cas-是一种什么样的同步机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-cas-是一种什么样的同步机制"}},[a._v("#")]),a._v(" 29. CAS 是一种什么样的同步机制?")]),a._v(" "),s("h2",{attrs:{id:"_30-nio-的原理-包括哪几个组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-nio-的原理-包括哪几个组件"}},[a._v("#")]),a._v(" 30. NIO 的原理, 包括哪几个组件?")]),a._v(" "),s("h2",{attrs:{id:"_31-简单介绍一下-java-的反射机制-反射在哪些地方有应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-简单介绍一下-java-的反射机制-反射在哪些地方有应用场景"}},[a._v("#")]),a._v(" 31. 简单介绍一下 java 的反射机制?反射在哪些地方有应用场景?")]),a._v(" "),s("h2",{attrs:{id:"_32-spring-加载-bean-的流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-spring-加载-bean-的流程"}},[a._v("#")]),a._v(" 32. spring 加载 bean 的流程?")]),a._v(" "),s("h2",{attrs:{id:"_33-java-线程池-线程池构造函数的几个参数含义-keepalivetime-解释一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33-java-线程池-线程池构造函数的几个参数含义-keepalivetime-解释一下"}},[a._v("#")]),a._v(" 33. java 线程池?线程池构造函数的几个参数含义?keepAliveTime 解释一下?")]),a._v(" "),s("h2",{attrs:{id:"_34-一个接口-要去调用另外-5-个接口-每一个接口都会返回数据给这个调用接口-调用接口要对数据进行合并并返回给上层-这样一种场景可能用到并发包下的哪些类-你会怎么去实现这样的业务景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34-一个接口-要去调用另外-5-个接口-每一个接口都会返回数据给这个调用接口-调用接口要对数据进行合并并返回给上层-这样一种场景可能用到并发包下的哪些类-你会怎么去实现这样的业务景"}},[a._v("#")]),a._v(" 34. 一个接口, 要去调用另外 5 个接口, 每一个接口都会返回数据给这个调用接口, 调用接口要对数据进行合并并返回给上层. 这样一种场景可能用到并发包下的哪些类?你会怎么去实现这样的业务景?")]),a._v(" "),s("h2",{attrs:{id:"_35-countdownlatch-和-cyclicbarrier-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35-countdownlatch-和-cyclicbarrier-的区别"}},[a._v("#")]),a._v(" 35. CountDownLatch 和 CyclicBarrier 的区别?")]),a._v(" "),s("h2",{attrs:{id:"_36-线程加锁有哪些方式-synchronized-和-lock-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36-线程加锁有哪些方式-synchronized-和-lock-的区别"}},[a._v("#")]),a._v(" 36. 线程加锁有哪些方式?synchronized 和 lock 的区别?")]),a._v(" "),s("h2",{attrs:{id:"_37-volatile-关键字的作用-为什么使用-atomiclong-而不使用-long-atomiclong-的底层是怎么实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37-volatile-关键字的作用-为什么使用-atomiclong-而不使用-long-atomiclong-的底层是怎么实现的"}},[a._v("#")]),a._v(" 37. volatile 关键字的作用?为什么使用 AtomicLong 而不使用 Long?AtomicLong 的底层是怎么实现的?")]),a._v(" "),s("h2",{attrs:{id:"_38-mysql-的存储引擎有哪几种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38-mysql-的存储引擎有哪几种"}},[a._v("#")]),a._v(" 38. mysql 的存储引擎有哪几种?")]),a._v(" "),s("h2",{attrs:{id:"_39-sql-优化有哪些着手点-组合索引的最左前缀原则的含义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_39-sql-优化有哪些着手点-组合索引的最左前缀原则的含义"}},[a._v("#")]),a._v(" 39. sql 优化有哪些着手点?组合索引的最左前缀原则的含义?")]),a._v(" "),s("h2",{attrs:{id:"_40-springmvc-处理请求的流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_40-springmvc-处理请求的流程"}},[a._v("#")]),a._v(" 40. springmvc 处理请求的流程?")]),a._v(" "),s("h2",{attrs:{id:"_41-spring-的事务怎么使用-事务回滚-自定义异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_41-spring-的事务怎么使用-事务回滚-自定义异常"}},[a._v("#")]),a._v(" 41. spring 的事务怎么使用?事务回滚?自定义异常?")]),a._v(" "),s("h2",{attrs:{id:"_42-脏读-幻读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_42-脏读-幻读"}},[a._v("#")]),a._v(" 42. 脏读?幻读?")]),a._v(" "),s("h2",{attrs:{id:"_43-tcp-四次挥手的过程-time-wait-为什么至少设置两倍的-msl-时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_43-tcp-四次挥手的过程-time-wait-为什么至少设置两倍的-msl-时间"}},[a._v("#")]),a._v(" 43. tcp 四次挥手的过程?TIME_WAIT 为什么至少设置两倍的 MSL 时间?")]),a._v(" "),s("h2",{attrs:{id:"_44-get-和-post-请求的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_44-get-和-post-请求的区别"}},[a._v("#")]),a._v(" 44. get 和 post 请求的区别?")]),a._v(" "),s("h2",{attrs:{id:"_45-cookie-和-session-的请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_45-cookie-和-session-的请求"}},[a._v("#")]),a._v(" 45. cookie 和 session 的请求?")]),a._v(" "),s("h2",{attrs:{id:"_46-了解哪些开源的中间件-缓存-消息-分布式框架"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_46-了解哪些开源的中间件-缓存-消息-分布式框架"}},[a._v("#")]),a._v(" 46. 了解哪些开源的中间件?缓存?消息?分布式框架?")]),a._v(" "),s("h2",{attrs:{id:"_47-用到过哪些设计模式-单例模式的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_47-用到过哪些设计模式-单例模式的实现"}},[a._v("#")]),a._v(" 47. 用到过哪些设计模式?单例模式的实现?")]),a._v(" "),s("h2",{attrs:{id:"_48-数据库的事务实现原理-操作过程-如何做到事物之间的独立性等问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_48-数据库的事务实现原理-操作过程-如何做到事物之间的独立性等问题"}},[a._v("#")]),a._v(" 48. 数据库的事务实现原理, 操作过程, 如何做到事物之间的独立性等问题")]),a._v(" "),s("h2",{attrs:{id:"_49-数据库的脏读-幻读-不可重复读出现的原因原理-解决办法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_49-数据库的脏读-幻读-不可重复读出现的原因原理-解决办法"}},[a._v("#")]),a._v(" 49. 数据库的脏读, 幻读, 不可重复读出现的原因原理, 解决办法")]),a._v(" "),s("h2",{attrs:{id:"_50-数据库的隔离级别-mvcc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_50-数据库的隔离级别-mvcc"}},[a._v("#")]),a._v(" 50. 数据库的隔离级别, MVCC")]),a._v(" "),s("h2",{attrs:{id:"_51-乐观锁-悲观锁-互斥锁-读写锁的原理实现与区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_51-乐观锁-悲观锁-互斥锁-读写锁的原理实现与区别"}},[a._v("#")]),a._v(" 51. 乐观锁, 悲观锁, 互斥锁, 读写锁的原理实现与区别")]),a._v(" "),s("h2",{attrs:{id:"_52-线程的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_52-线程的生命周期"}},[a._v("#")]),a._v(" 52. 线程的生命周期")]),a._v(" "),s("h2",{attrs:{id:"_53-一致性-hash-算法原理与应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_53-一致性-hash-算法原理与应用"}},[a._v("#")]),a._v(" 53. 一致性 hash 算法原理与应用")]),a._v(" "),s("h2",{attrs:{id:"_54-cap-原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_54-cap-原则"}},[a._v("#")]),a._v(" 54. CAP 原则")]),a._v(" "),s("h2",{attrs:{id:"_55-cas-操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_55-cas-操作"}},[a._v("#")]),a._v(" 55. CAS 操作")]),a._v(" "),s("h2",{attrs:{id:"_56-分布式-raft-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_56-分布式-raft-算法"}},[a._v("#")]),a._v(" 56. 分布式 raft 算法")]),a._v(" "),s("h1",{attrs:{id:"linux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[a._v("#")]),a._v(" Linux")]),a._v(" "),s("h2",{attrs:{id:"_1-linux-系统下你关注过哪些内核参数-说说你知道的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-linux-系统下你关注过哪些内核参数-说说你知道的"}},[a._v("#")]),a._v(" 1. Linux 系统下你关注过哪些内核参数, 说说你知道的.")]),a._v(" "),s("h2",{attrs:{id:"_2-linux-下-io-模型有几种-各自的含义是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-linux-下-io-模型有几种-各自的含义是什么"}},[a._v("#")]),a._v(" 2. Linux 下 IO 模型有几种, 各自的含义是什么.")]),a._v(" "),s("h2",{attrs:{id:"_3-epoll-和-poll-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-epoll-和-poll-有什么区别"}},[a._v("#")]),a._v(" 3. epoll 和 poll 有什么区别.")]),a._v(" "),s("h2",{attrs:{id:"_4-平时用到哪些-linux-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-平时用到哪些-linux-命令"}},[a._v("#")]),a._v(" 4. 平时用到哪些 Linux 命令.")]),a._v(" "),s("h2",{attrs:{id:"_5-用一行命令查看文件的最后五行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-用一行命令查看文件的最后五行"}},[a._v("#")]),a._v(" 5. 用一行命令查看文件的最后五行.")]),a._v(" "),s("h2",{attrs:{id:"_6-用一行命令输出正在运行的-java-进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-用一行命令输出正在运行的-java-进程"}},[a._v("#")]),a._v(" 6. 用一行命令输出正在运行的 java 进程.")]),a._v(" "),s("h2",{attrs:{id:"_7-介绍下你理解的操作系统中线程切换过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-介绍下你理解的操作系统中线程切换过程"}},[a._v("#")]),a._v(" 7. 介绍下你理解的操作系统中线程切换过程.")]),a._v(" "),s("h2",{attrs:{id:"_8-进程和线程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-进程和线程的区别"}},[a._v("#")]),a._v(" 8. 进程和线程的区别")]),a._v(" "),s("h2",{attrs:{id:"_9-top-命令之后有哪些内容-有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-top-命令之后有哪些内容-有什么作用"}},[a._v("#")]),a._v(" 9. top 命令之后有哪些内容, 有什么作用.")]),a._v(" "),s("h2",{attrs:{id:"_10-线上-cpu-爆高-请问你如何找到问题所在"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-线上-cpu-爆高-请问你如何找到问题所在"}},[a._v("#")]),a._v(" 10. 线上 CPU 爆高, 请问你如何找到问题所在.")]),a._v(" "),s("h2",{attrs:{id:"_11-free-h-buffers-和-cached-有什么不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-free-h-buffers-和-cached-有什么不同"}},[a._v("#")]),a._v(" 11. free -h, buffers 和 cached 有什么不同")]),a._v(" "),s("h1",{attrs:{id:"mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[a._v("#")]),a._v(" mysql")]),a._v(" "),s("h2",{attrs:{id:"_1-mysql-为什么要用-b-树-不用平衡二叉树做索引结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql-为什么要用-b-树-不用平衡二叉树做索引结构"}},[a._v("#")]),a._v(" 1. mysql 为什么要用 b+树, 不用平衡二叉树做索引结构?")]),a._v(" "),s("h2",{attrs:{id:"_2-创建数据库索引应该怎么考虑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建数据库索引应该怎么考虑"}},[a._v("#")]),a._v(" 2. 创建数据库索引应该怎么考虑?")]),a._v(" "),s("h2",{attrs:{id:"_3-使用-int-做-primary-key-和使用-string-有什么优劣"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-int-做-primary-key-和使用-string-有什么优劣"}},[a._v("#")]),a._v(" 3. 使用 int 做 primary key 和使用 string 有什么优劣?")]),a._v(" "),s("h1",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[a._v("#")]),a._v(" http")]),a._v(" "),s("h2",{attrs:{id:"_1-302-有什么区别-应用上有什么异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-302-有什么区别-应用上有什么异同"}},[a._v("#")]),a._v(" 1. /302 有什么区别?应用上有什么异同.")]),a._v(" "),s("h2",{attrs:{id:"_2-tcp-ip-流量控制和拥塞控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp-ip-流量控制和拥塞控制"}},[a._v("#")]),a._v(" 2. tcp/ip 流量控制和拥塞控制")]),a._v(" "),s("h2",{attrs:{id:"_3-什么是连接的半打开-半关闭状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是连接的半打开-半关闭状态"}},[a._v("#")]),a._v(" 3. 什么是连接的半打开, 半关闭状态")]),a._v(" "),s("h2",{attrs:{id:"_4-internet-采用哪种网络协议-该协议的主要层次结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-internet-采用哪种网络协议-该协议的主要层次结构"}},[a._v("#")]),a._v(" 4. Internet 采用哪种网络协议?该协议的主要层次结构?")]),a._v(" "),s("h2",{attrs:{id:"_5-internet-物理地址和-ip-地址转换采用什么协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-internet-物理地址和-ip-地址转换采用什么协议"}},[a._v("#")]),a._v(" 5. Internet 物理地址和 IP 地址转换采用什么协议?")]),a._v(" "),s("h2",{attrs:{id:"_6-ip-地址的编码分为哪俩部分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-ip-地址的编码分为哪俩部分"}},[a._v("#")]),a._v(" 6. IP 地址的编码分为哪俩部分?")]),a._v(" "),s("h1",{attrs:{id:"其他"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),s("h2",{attrs:{id:"_1-写出-float-x-与-零值-比较的-if-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-写出-float-x-与-零值-比较的-if-语句"}},[a._v("#")]),a._v(' 1. 写出 float x 与"零值"比较的 if 语句')]),a._v(" "),s("h2",{attrs:{id:"_2-线程安全的单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程安全的单例模式"}},[a._v("#")]),a._v(" 2. 线程安全的单例模式")]),a._v(" "),s("h1",{attrs:{id:"算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[a._v("#")]),a._v(" 算法")]),a._v(" "),s("h2",{attrs:{id:"_1-写一个程序-要求功能-求出用-1-2-5-这三个数不同个数组合的和为-100-的组合个数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-写一个程序-要求功能-求出用-1-2-5-这三个数不同个数组合的和为-100-的组合个数"}},[a._v("#")]),a._v(" 1. 写一个程序, 要求功能: 求出用 1, 2, 5 这三个数不同个数组合的和为 100 的组合个数")]),a._v(" "),s("h2",{attrs:{id:"_2-实现一个函数-把一个字符串中的字符从小写转为大写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现一个函数-把一个字符串中的字符从小写转为大写"}},[a._v("#")]),a._v(" 2. 实现一个函数, 把一个字符串中的字符从小写转为大写")]),a._v(" "),s("h2",{attrs:{id:"_3-随机输入一个数-判断它是不是对称数-回文数-如-3-121-12321-45254-不能用字符串库函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-随机输入一个数-判断它是不是对称数-回文数-如-3-121-12321-45254-不能用字符串库函数"}},[a._v("#")]),a._v(" 3. 随机输入一个数, 判断它是不是对称数(回文数)(如 3, 121, 12321, 45254). 不能用字符串库函数")]),a._v(" "),s("h2",{attrs:{id:"_4-求2-2000-的所有素数-有足够的内存-要求尽量快"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-求2-2000-的所有素数-有足够的内存-要求尽量快"}},[a._v("#")]),a._v(" 4. 求2~2000 的所有素数.有足够的内存,要求尽量快")]),a._v(" "),s("h2",{attrs:{id:"_5-将二叉树的两个孩子换位置-即左变右-右变左-不能用递规"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-将二叉树的两个孩子换位置-即左变右-右变左-不能用递规"}},[a._v("#")]),a._v(" 5. 将二叉树的两个孩子换位置, 即左变右, 右变左. 不能用递规")]),a._v(" "),s("h2",{attrs:{id:"_6-hell-well-hello-world-等字符串组-现在问能否拼接成-helloworld-代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-hell-well-hello-world-等字符串组-现在问能否拼接成-helloworld-代码实现"}},[a._v("#")]),a._v(" 6. hell, well, hello, world 等字符串组, 现在问能否拼接成 helloworld, 代码实现.")]),a._v(" "),s("h2",{attrs:{id:"_7-快排算法实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-快排算法实现"}},[a._v("#")]),a._v(" 7. 快排算法实现")]),a._v(" "),s("h2",{attrs:{id:"_8-冒泡排序算法的时间复杂度是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-冒泡排序算法的时间复杂度是什么"}},[a._v("#")]),a._v(" 8. 冒泡排序算法的时间复杂度是什么?")]),a._v(" "),s("h2",{attrs:{id:"_9-匹马赛跑-有一个赛场-只有五个赛道-没有计时器-只能通过目测来记录快慢-求出第三-3-快的马要多少场比赛"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-匹马赛跑-有一个赛场-只有五个赛道-没有计时器-只能通过目测来记录快慢-求出第三-3-快的马要多少场比赛"}},[a._v("#")]),a._v(" 9. 匹马赛跑, 有一个赛场, 只有五个赛道, 没有计时器, 只能通过目测来记录快慢, 求出第三 3 快的马要多少场比赛?")]),a._v(" "),s("h2",{attrs:{id:"_10-kmp-算法-next-数组的求解思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-kmp-算法-next-数组的求解思路"}},[a._v("#")]),a._v(" 10. kmp 算法 next 数组的求解思路")]),a._v(" "),s("h2",{attrs:{id:"_11-数组中有三个数字出现超过-3-4-求这三个数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-数组中有三个数字出现超过-3-4-求这三个数字"}},[a._v("#")]),a._v(" 11. 数组中有三个数字出现超过 3/4, 求这三个数字?")]),a._v(" "),s("h2",{attrs:{id:"_12-到-n-2-个数组中缺了两个数-如何用-o-n-时间-o-1-空间找到这两个数字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-到-n-2-个数组中缺了两个数-如何用-o-n-时间-o-1-空间找到这两个数字"}},[a._v("#")]),a._v(" 12. 到 n+2 个数组中缺了两个数, 如何用 O(n)时间, O(1)空间找到这两个数字.")]),a._v(" "),s("h2",{attrs:{id:"_13-一条线段长为-1-随机选两个点-将改线段分为三段-三段能成三角形的概率是多少"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-一条线段长为-1-随机选两个点-将改线段分为三段-三段能成三角形的概率是多少"}},[a._v("#")]),a._v(" 13. 一条线段长为 1, 随机选两个点, 将改线段分为三段, 三段能成三角形的概率是多少?")]),a._v(" "),s("h2",{attrs:{id:"_14-有一个教授-他三个学生-脑袋背后分别各写了一个数字-其中一个数字是另外两个数字的和-经过几轮后-有一个学生猜出了自己的数字请问是什么原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-有一个教授-他三个学生-脑袋背后分别各写了一个数字-其中一个数字是另外两个数字的和-经过几轮后-有一个学生猜出了自己的数字请问是什么原因"}},[a._v("#")]),a._v(" 14. 有一个教授, 他三个学生, 脑袋背后分别各写了一个数字, 其中一个数字是另外两个数字的和, 经过几轮后, 有一个学生猜出了自己的数字请问是什么原因?")]),a._v(" "),s("h2",{attrs:{id:"_15-b-树做索引时-b-树通常高度为多少层-要参考哪些条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-b-树做索引时-b-树通常高度为多少层-要参考哪些条件"}},[a._v("#")]),a._v(" 15. B+树做索引时, B+树通常高度为多少层?要参考哪些条件?")])])}),[],!1,null,null,null);t.default=_.exports}}]);