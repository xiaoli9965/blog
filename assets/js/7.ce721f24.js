(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{432:function(t,a,_){t.exports=_.p+"assets/img/jvm_thread.c5175059.png"},433:function(t,a,_){t.exports=_.p+"assets/img/TLAB.d64c7d4d.png"},446:function(t,a,_){"use strict";_.r(a);var s=_(34),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("hr"),t._v(" "),s("h2",{attrs:{id:"title-jvm-jmm-8版本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#title-jvm-jmm-8版本"}},[t._v("#")]),t._v(" title: JVM&&JMM(8版本)")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("JVM相关知识")]),t._v(" "),s("ul",[s("li",[t._v("JVM 不仅仅只能运行 Java 程序，还能运行 Scala，Groovy，kotlin 等多种语言（目前约 10 种）,JVM 官方有一套官方规范，只要符合规范的文件都可以在 JVM 中运行")]),t._v(" "),s("li",[t._v("目前主流虚拟机叫 🔥"),s("code",[t._v("HotSpot（Oracle的）")]),t._v("，还有 N 多其他的公司的虚拟机,比如 JRockit VM （SUN 公司）,OpenJDK(开源的)， IBM 的 J9 VM 等等；")]),t._v(" "),s("li",[t._v("JDK8 的方法区改名为 MetaSpace（元空间），直接存放在物理内存上")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTgy1gcttslwnrvj31bn0u0u0x.jpg",alt:"JVM内存模型"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://tva1.sinaimg.cn/large/00831rSTgy1gcttt0eez1j31360hy7j9.jpg",alt:"堆内存模型"}})]),t._v(" "),s("p",[s("strong",[t._v("Hotspot JVM 后台运行的系统线程主要有下面几个：")]),t._v(" "),s("img",{attrs:{src:_(432),alt:"jvm线程"}})]),t._v(" "),s("p",[t._v("所有线程共享:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Method Area")])]),t._v(" "),s("li",[s("p",[t._v("Head堆")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("线程隔离数据区")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("程序计数器:")]),t._v(" "),s("ul",[s("li",[t._v("BPC (bytecode pointer),在程序执行时标记程序执行到哪里了")])])]),t._v(" "),s("li",[s("strong",[t._v("虚拟机栈 VM Stack:")]),t._v(" 每个方法执行都会创建一个栈帧, 用于存储局部变量表、操作数栈、动态链接、方法出口等信息\n"),s("ul",[s("li",[t._v("局部变量表: "),s("code",[t._v("保存栈执行过程中的常量")])]),t._v(" "),s("li",[t._v("操作数栈: "),s("code",[t._v("先进后出的栈")])]),t._v(" "),s("li",[t._v("指向常量池的指针")])])]),t._v(" "),s("li",[s("strong",[t._v("本地方法栈( Nvtive Method Stack):")]),t._v(" 本地方法栈则为 Native 方法")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("线程共享区域【JAVA 堆、方法区】、直接内存")])]),t._v(" "),s("ul",[s("li",[t._v("堆: 运行时数据区")]),t._v(" "),s("li",[t._v("方法区: metaspace 运行时常量池")])])])]),t._v(" "),s("h2",{attrs:{id:"_1-对象内存存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象内存存储"}},[t._v("#")]),t._v(" 1. 对象内存存储")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200406162442_9TNvfb_Screenshot.jpeg",alt:"对象内存存储"}})]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Markword：")]),t._v(" 存放锁状态，对象分代，hashcod 等,不压缩占 8 个,压缩占 4 个")]),t._v(" "),s("li",[s("code",[t._v("Class point：")]),t._v(" 存放当前对象类型的引用,所有的 Class 类型都会被存放点 MetaSpace 中")]),t._v(" "),s("li",[s("code",[t._v("Instance Data：")]),t._v(" 每个变量指针占 8 个字节,开启压缩占 4 个")]),t._v(" "),s("li",[s("code",[t._v("Panding：")]),t._v(" 如果前面几项加起来字节数不能被 8 整除，就会使用这个区域行补齐..如果满足被 8 整除这个区域则没有")])]),t._v(" "),s("h3",{attrs:{id:"_1-1-java对象头长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-java对象头长度"}},[t._v("#")]),t._v(" 1.1. Java对象头长度")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200709142319_qUieai_Screenshot.jpeg",alt:"对象头长度"}})]),t._v(" "),s("h3",{attrs:{id:"_1-2-java对象头的存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-java对象头的存储结构"}},[t._v("#")]),t._v(" 1.2. Java对象头的存储结构")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("32位JVM的Mark Word 默认存储结构\n")])])]),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200709142451_Q1LhAl_Screenshot.jpeg",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"_1-3-mark-word的状态变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-mark-word的状态变化"}},[t._v("#")]),t._v(" 1.3. Mark Word的状态变化")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("Mark Word 存储的数据会随着锁标志为的变化而变化。\n")])])]),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200709142527_sxUE3z_Screenshot.jpeg",alt:""}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("64位虚拟机下，Mark Word是64bit大小的\n")])])]),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200709142552_cVgznC_Screenshot.jpeg",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_2-对象压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象压缩"}},[t._v("#")]),t._v(" 2. 对象压缩")]),t._v(" "),s("p",[t._v("JVM 中默认开启了对象压缩,在内存超过 32G 时对象压缩自动失效;\n如果开启压缩了:Markword：占 4 个字节,Instance Data：每个占 4 字节;")]),t._v(" "),s("p",[t._v("所以原版在 32G 内存中运行够用,换到 64 的机器后发现内存没多出来多少就是因为对象压缩关闭了\n可能原本在 32G 环境中占 30G 内存,进行内存扩容后 30G 的数据直接变成了占用 45G")]),t._v(" "),s("h3",{attrs:{id:"_2-1-栈上分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-栈上分配"}},[t._v("#")]),t._v(" 2.1. 栈上分配")]),t._v(" "),s("blockquote",[s("p",[t._v("JDK8 默认开启栈上分配,栈上分配是特别爽的事情,因为方法执行完栈就自动弹出了(内存释放),不用考虑垃圾回收的问题")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200406152450_3kUNGr_Screenshot.jpeg",alt:"栈上分配"}})]),t._v(" "),s("p",[t._v("在分代模型中,当 new 对象的时候首先在栈上分配(栈上能分配的情况下),否则就判断对象大小,如果太大直接放入老年代,如果不大就判断能否在 TLAB 存放,不能则存入栈中")]),t._v(" "),s("h3",{attrs:{id:"_2-2-tlab-tread-local-allocation-buffer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-tlab-tread-local-allocation-buffer"}},[t._v("#")]),t._v(" 2.2. TLAB (Tread Local Allocation Buffer)")]),t._v(" "),s("blockquote",[s("p",[t._v("本地线程缓冲区")])]),t._v(" "),s("p",[t._v("JVM 会为每个线程在堆中开辟一小块空间用于存放这个线程的对象;")]),t._v(" "),s("p",[s("strong",[t._v("为什么要有 TLAB?")]),t._v("\n一个 JVM 中会运行 N 个线程,如果同时创建对象的话会存在内存区域竞争问题."),s("br"),t._v("\n假如一个线程要要创建对象在 0x01 区域,另一个线程也要创建对象在 0x01 区域 这个时候就存在锁竞争问题"),s("code",[t._v("(CAS 锁)")]),t._v("会导致 CPU 资源浪费,所以有了 TLAB 避免了一大部分的竞争问题.")]),t._v(" "),s("p",[t._v("Thread Local Allocation Buffers，线程本地分配缓存。JVM使用了TLAB这种线程专属的区间来避免多线程冲突（无锁方式），提高对象分配效率。TLAB本身占用了Eden空间，即JVM会为每一个线程都分配一块TLAB空间")]),t._v(" "),s("p",[s("img",{attrs:{src:_(433),alt:"TLAB"}})]),t._v(" "),s("h2",{attrs:{id:"_3-jmm内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-jmm内存模型"}},[t._v("#")]),t._v(" 3. JMM内存模型")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200709195306_7lnpy0_Screenshot.jpeg",alt:"JMM内存模型"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"http://md.yike.link/20200709205344_kWH8ua_Screenshot.jpeg",alt:"JMM内存模型2"}})])])}),[],!1,null,null,null);a.default=v.exports}}]);